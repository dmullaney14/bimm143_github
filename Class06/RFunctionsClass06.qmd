---
title: "R Functions Class 06"
author: "Dylan Mullaney (A16869792)"
format: pdf
---

Today we will get more exposure to functions in R. We call functions to do all our work and today we will learn how to write our own.


```{r}
add<- function(x, y=0) { 
 x + y
}

add (5, 6)
add (1, c(10, 100))
```

Make sure to send it to the brain if you add a new function

```{r}
add (100)

add<- function(x, y=0, z=0) { 
 x + y + z
  }
  
add (8, 17, 45)

```

Note that arguments can have default values, which allows it to run with less outputs than there are variables.


## A second more fun function

Let's write a function that generates random nucleotide sequences. 

We can make use of the in-built 'sample()' function in R to help us here.


```{r}
sample(x=1:10, size=9)
```

Randomly repeating, but not reusing the same number

```#{r}
   #sample(x=1:10, size=11)
```


Produces error, doesn't work because it's asking for too many outputs and there's not enough option to not repeat one


> Q: Can you use sample() to generate a random nucleotide sequence of length 5?

```{r}
sample(x= c("A", "C", "T", "G"), size= 5, replace = TRUE)
```

- Use "replace=TRUE" to be able to repeat values when you're asking for more outputs than you have options.
- Using the small "c" makes your values into a vector



> Q. Write a function called 'generate_dna()' that makes a nucleotide sequence of a user specified length. 

Every function in R has at least 3 things:

- a **name** (ie. generate_dna())
- one or more **input arguments** (ie. length of sequence)
- a **body** (what does the work)


```{r}
generate_dna <- sample (x = c("A", "G", "T", "C"), size= 12, replace = T)
generate_dna
```

Let's try a way to personalize the length each time.

```{r}
generate_dna2 <- function(length=12) {
  bases <- c ("A", "C", "G", "T") 
  sample(bases, size = length, replace = TRUE)
}
```

```{r}
generate_dna2(10)
generate_dna2(100)
```

> Can you write a 'generate_protein()' function that returns amino acid sequences of a user requested length?

```{r}
##First, pull in amino acids list from bio3d. 1st line is whole library, 2nd line is more specifically just teh AAs.

library(bio3d)

bio3d::aa.table$aa1 [1:20]
```

```{r}
generate_protein <- function(length) {
  AA= c (bio3d::aa.table$aa1 [1:20])
  sample(AA, size=length, replace=TRUE)
}

generate_protein(12)
```

I want my output of this function not to be a vectore with one amino acid per element but rather a one element single string (ie like a word with all the letters pasted together). The paste() function puts things together; paste (x, collapse=""). Collapse tells what you want in between the values. 

```{r}
bases <- c("A", "C", "G", "T")
paste(bases, collapse="")
```


```{r}
paste(generate_protein(), collapse="")
```


```{r}
generate_protein <- function(length=5) {
  AA= c (bio3d::aa.table$aa1 [1:20])
  s<- sample(AA, size=length, replace=TRUE)
  paste(s, collapse="")
}
```

```{r}
  generate_protein()
```

> Q. Generate protein sequences from length 6 to 12

We can use the useful utility function 'sapply()' to help us "apply" our function over all the values from 6-12. Want to know more about it? Use ?sapply

```{r}
sapply(6:12, generate_protein)

```

I want teh sequences to be labeled more nicely.

```{r}
paste(">ID", 6:12)
```

```{r}
ans <- sapply(6:12, generate_protein)

cat(paste(">ID.", 6:12, sep="", "\n", ans, "\n"), sep="")
```

> Q. Are any of these sequences unique in nature i.e. never found in nature? We can search "refseq-protein" and look for 100% Ide and 100% coverage matches with blastP.

Some sequences did have 100% identity over 100% query coverage. However, there are so many possible amino acid combinations over these varying lengths that it makes sense that there were 4 of the 7 tested sequences that did not have an exact match. 







