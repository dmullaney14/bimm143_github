---
title: "Class06 HW"
author: "Dylan Mullaney"
output: pdf
---

I want function that will read files based on a letter and numerical input. If I put in s1, I want it to read back the results from "4AKE". Same for corresponding code for s2 and s3. 

Q1. Each read.pbd() function is reading a protein data bank file and returns a line that details that it is accessing an online.  
```{r}
#library(bio3d)
#s1 <- read.pdb("4AKE") # kinase with drug
#s2 <- read.pdb("1AKE") # kinase no drug
#s3 <- read.pdb("1E4Y") # kinase with drug

#s1.chainA <- trim.pdb(s1, chain="A", elety="CA")
#s2.chainA <- trim.pdb(s2, chain="A", elety="CA")
#s3.chainA <- trim.pdb(s1, chain="A", elety="CA")

#s1.b <- s1.chainA$atom$b
#s2.b <- s2.chainA$atom$b
#s3.b <- s3.chainA$atom$b

#plotb3(s1.b, sse=s1.chainA, typ="l", ylab="Bfactor")
#plotb3(s2.b, sse=s2.chainA, typ="l", ylab="Bfactor")
#plotb3(s3.b, sse=s3.chainA, typ="l", ylab="Bfactor")
```

The trim.pdb() function pulls out the data of interest based on what we are asking it to trim. You are creating a new subset of items based on a larger structure. 

```{r}
#?trim.pdb()
```

Q6. Simplify reading files

```{r}
library(bio3d)

read_kinase <- function(num)  {
  pbds <- c("4AKE", "1AKE", "1E4Y")
  pdb_data <- read.pdb (pbds[num])
  return(pdb_data)
}

read_kinase(1)
read_kinase (2)
read_kinase (3)

```


Simplify trimming pdb files

```{r}
trim_chain <- function (read_kinase) {
  
  trimmed_pdb <- trim.pdb (read_kinase, chain = "A", elety= "CA")
  return(trimmed_pdb)
}

trim_chain(read_kinase(1))
trim_chain(read_kinase(2))
trim_chain(read_kinase(3))

```


Simplify accessing a subset of this data and reassigning to a new value. Accessing chain A atom, B factor column w/in atom data.  

```{r}

extract_factors <- function (trim_chain) 
{
  
return (trim_chain$chainA$atom$b)
}

extract_factors(read_kinase(1))

#s1.b <- s1.chainA$atom$b
#s2.b <- s2.chainA$atom$b
#s3.b <- s3.chainA$atom$b
```



Simplify plotting the data


```{r}

# plot_new <- function(b_factors, sse, y_label = "Bfactor") {
#  plotb3(b_factors, sse = sse, typ = "l", ylab = y_label)
# }

#plot_new()
#plotb3(s1.b, sse=s1.chainA, typ="l", ylab="Bfactor")
#plotb3(s2.b, sse=s2.chainA, typ="l", ylab="Bfactor")
#plotb3(s3.b, sse=s3.chainA, typ="l", ylab="Bfactor")
```


