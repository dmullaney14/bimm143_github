---
title: "Class 17: Downstream analysis"
author: "Dylan Mullaney(A16869792)"
format: pdf
---

Import the files that we created using the remote computer. Create a folder and name files to read them into the folder. 

```{r}
library(tximport)

folders <- dir(pattern="SRR21568*")
samples <- sub("_quant", "", folders)
files <- file.path( folders, "abundance.h5" )
names(files) <- samples

txi.kallisto <- tximport(files, type = "kallisto", txOut = TRUE)
```

```{r}
head(txi.kallisto$counts)

```

How many transcripts do we have for each sample?

```{r}
colSums(txi.kallisto$counts)
```

How many transcripts are in at least one sample?

```{r}
sum(rowSums(txi.kallisto$counts)>0)
```

Filter out annotated transcripts with no reads and ones with no change over the sample

```{r}
to.keep <- rowSums(txi.kallisto$counts) > 0
kset.nonzero <- txi.kallisto$counts[to.keep,]

keep2 <- apply(kset.nonzero,1,sd)>0
x <- kset.nonzero[keep2,]
```

## Principal Component Analysis (PCA)

```{r}
pca <- prcomp(t(x), scale=TRUE)
summary(pca)
```

Let's graph the first two PCs 

```{r}
plot(pca$x[,1], pca$x[,2],
     col=c("blue","blue","red","red"),
     xlab="PC1", ylab="PC2", pch=16)  
```

> Q. Use ggplot to make a similar figure of PC1 vs PC2 and a separate figure PC1 vs PC3 and PC2 vs PC3. Note, ggplot needs a data frame to access data

```{r}
library(ggplot2)
library(ggrepel)
#metadata to create labels on points
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

#data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC1, PC2, col=Condition)+
  geom_point () +
  geom_text_repel(label=rownames(y)) +
  ggtitle("PC1 v PC2")

```

```{r}
ggplot(y) +
  aes(PC1, PC3, col=Condition)+
  geom_point () +
  geom_text_repel(label=rownames(y)) +
  ggtitle("PC1 v PC3")
```


```{r}
ggplot(y) +
  aes(PC2, PC3, col=Condition)+
  geom_point () +
  geom_text_repel(label=rownames(y)) +
  ggtitle("PC2 v PC3")
```

## Differential-expression analysis

Creating a DESeq dataset to use with DESeq2

```{r}
library(DESeq2, quietly=TRUE)

```

Create sample table of data in data frame format
```{r}
sampleTable <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(sampleTable) <- colnames(txi.kallisto$counts)
```

```{r}
dds <- DESeqDataSetFromTximport(txi.kallisto,
                                sampleTable, 
                                ~condition)
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
head(res)
```

